import os
import shutil
import datetime

class CGenerator:
    def __init__(self, compiler):
        self.compiler = compiler
        self.config = self.compiler.config

    def generate(self):
        """
        Cソースファイルを作成する
        """
        # ディレクトリの作成
        target_dir = self.config['Cocyuts']['output_dir']
        create_c_dir(target_dir)

        # ヘッダーファイルの作成、コピー
        template_dir = self.config['Cocyuts']['c_lib_dir']

        self.generate_hedarfiles(target_dir, template_dir)

        # Cソースの作成
        target_dir = self.config['Cocyuts']['output_dir']
        self.generate_cqt_gen(target_dir)

        # ライブラリの作成
        self.generate_cqt_lib()

    def generate_hedarfiles(self, target_dir, template_dir):
        """
        template_dirから、target_dirへヘッダファイルをコピーする。
        :param target_dir: str
        :param template_dir: str
        :return:
        """
        headers = ['cqt.h', 'cqt_type.h', 'cqt_keras.h', 'numpy.h', 'cqt_net.h']
        for h in headers:
            shutil.copy(os.path.join(template_dir, h),
                        os.path.join(target_dir, 'inc'))


    def generate_cqt_gen(self, target_dir):
        """
        target_dirで指定されたディレクトリ/cqt_gen以下にcqt_gen.hとcqt_gen.cのファイルを作成する。
        :param target_dir: str
        :return:
        """
        cqt_gen_h_path = os.path.join(target_dir, 'cqt_gen', 'cqt_gen.h')
        print("making %s" % cqt_gen_h_path)
        cqt_gen_h = CqtGenH(cqt_gen_h_path)
        cqt_gen_h.generate()

        cqt_gen_c_path = os.path.join(target_dir, 'cqt_gen', 'cqt_gen.c')
        print("making %s" % cqt_gen_c_path)
        cqt_gen_c = CqtGenH(cqt_gen_c_path)
        cqt_gen_c.generate()


    def generate_cqt_lib(self):
       """
        ## Ｃライブラリ(cqt_lib)
        ### cqt_lib.h
        ### cqt_lib.c
        ### numpy.c
       """


class CFile:
    def __init__(self, file):
        self.file = file
        self.fp = open(file, 'w')

    def __del__(self):
        self.fp.close()

    def wr(self, s):
        """
        ファイルに文字列を書き込む
        :param s: str
        :return:
        """
        self.fp.write(s)

    def wr_file_header(self):
        """
        自走生成されるファイルにつけられるヘッダー。
        :return:
        """
        # TODO コピーライトやコキュートスのバージョンを追加したい
        today = datetime.date.today()
        self.fp.write("//----------------------------------------------------------------------------------------------------\n")
        self.fp.write("// This file is automatically generated.\n")
        self.fp.write("// %s\n" % today.strftime('%Y/%m/%d %H:%M:%S'))
        self.fp.write("//----------------------------------------------------------------------------------------------------\n")

    def wr_include(self, file, stdlib=False):
        """
        include分を挿入する。
        stdlib = True　の時は #include <file>　形式を、stdlib = Falseの時は
        #include "file" 形式で書き込む。

        :param file: str
        :param stdlib: bool
        :return:
        """
        if stdlib:
            self.wr('#include <%s>\n' % file)
        else:
            self.wr('#include "%s"\n' % file)

    def cr(self):
        """
        改行の挿入
        :return:
        """
        self.wr('\n')

class CqtGenH(CFile):
    def __init__(self, file):
        super().__init__(file)

    def __del__(self):
        super().__del__()

    def generate(self):
        self.wr_file_header()
        self.wr_include('cqt.h')
        self.wr_include('cqt_net.h')
        self.cr()
        self.wr('CQT_NET* cqt_init(void);\n')
        self.wr('int cqt_load_weight_from_files(CQT_NET* np, const char *path);\n')
        self.wr('int cqt_run(CQT_NET* np, void *dp);\n')

        self.fp.write('\n')


class CqtGenC(CFile):
    def __init__(self, file):
        super().__init__(file)

    def __del__(self):
        super().__del__()

    def generate(self):
        self.wr_file_header()
        self.wr_include('cqt_gen.h')
        self.cr()
        self.wr('CQT_NET* cqt_init(void) { return NULL;};\n')
        self.wr('int cqt_load_weight_from_files(CQT_NET* np, const char *path) { return 0};\n')
        self.wr('int cqt_run(CQT_NET* np, void *dp) {return 0};\n')

        self.fp.write('\n')


def create_c_dir(tdir):
    """
    tdir以下に以下のディレクトリを作成する。
    inc, cqt_gen, cqt_lib
    :param tdir: str
    :return:
    """
    dirs = ['inc', 'cqt_gen', 'cqt_lib']
    for d in dirs:
        path = os.path.join(tdir, d)
        if not os.path.isdir(path):
            os.makedirs(path)

