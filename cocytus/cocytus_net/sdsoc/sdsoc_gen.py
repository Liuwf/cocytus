import os
import string
import datetime

from compiler.compiler import CQT_Dtype

ctype_dic = {CQT_Dtype.FLOAT32: 'float', CQT_Dtype.UINT8: 'unsigned char',
             CQT_Dtype.FIX16:'FIXP16', CQT_Dtype.FIX8: 'FIXP8', CQT_Dtype.FLOAT16: 'FP16'}


class SDSOC_gen():
    def __init__(self, template_dir):
        self.funcname_list = []
        self.header_name = ""
        self.fp_c = None
        self.fp_h = None
        self.template_dir = template_dir

    def generate(self, output_file, layer_detail):
        if self.fp_c is None:
            self.open_file(output_file)
            self.write_include()

        func_name = 'CQT_' + layer_detail.l.name + "_3x3"
        hw_func_name = func_name + '_hw'

        if func_name in self.funcname_list:
            # 同名の関数を作成済
            return

        print('[SDODC] %s' % func_name)

        prototype = self.make_function_prottype(hw_func_name, layer_detail)
        self.add_funciton_to_header(prototype)

        input_type = ctype_dic[layer_detail.input_dtypes[0]]
        weight_type = ctype_dic[layer_detail.weight_dtypes[0]]
        output_type = ctype_dic[layer_detail.output_dtypes[0]]
        size1 = layer_detail.l.input_shape[1]
        size2 = layer_detail.l.input_shape[2]

        # conv2d 3x3限定
        template_file = os.path.join(self.template_dir, 'Conv2d', 'Conv2d_same_3x3.c')

        t = string.Template(open(template_file).read())
        func_str = t.substitute(func_name=func_name,
                                input_type=input_type,
                                weight_type=weight_type,
                                output_type=output_type,
                                func_name_hw=hw_func_name,
                                func_prot_hw=prototype,
                                input_size_x=size1,
                                input_size_y=size2
                                )
        self.fp_c.write(func_str)

        self.funcname_list.append(func_name)

    def wr_file_header(self):
        """
        自走生成されるファイルにつけられるヘッダー。
        :return:
        """
        # TODO コピーライトやコキュートスのバージョンを追加したい
        today = datetime.date.today()
        self.fp.write("//----------------------------------------------------------------------------------------------------\n")
        self.fp.write("// This file is automatically generated.\n")
        self.fp.write("// %s\n" % today.strftime('%Y/%m/%d %H:%M:%S'))
        self.fp.write("//----------------------------------------------------------------------------------------------------\n")


    def write_func(self, func_name, layer_detail):
        self.wr('int %s(CQT_LAYER *lp, void *inp, void *outp){\n' % func_name)

        self.wr('\treturn CQT_RET_OK;\n')
        self.wr('}\n')
        self.wr('\n')

    def write_func_hw(self, hw_func_name, layer_detail):
        prototype = self.make_function_prottype(hw_func_name, layer_detail)

        self.wr(prototype + '{\n')



        self.wr('}\n')
        self.wr('\n')

    def make_function_prottype(self, func, layer_detail):
        input_type = ctype_dic[layer_detail.input_dtypes[0]]
        weight_type = ctype_dic[layer_detail.weight_dtypes[0]]
        output_type = ctype_dic[layer_detail.output_dtypes[0]]
        size1 = layer_detail.l.input_shape[1]
        size2 = layer_detail.l.input_shape[2]

        #assert(size1 == size2)
        prot = 'void %s(%s ip[%d], %s op[%d], %s weight[9], int bias, int act, int last)' % (func, input_type, size1 * size2, output_type, size1 * size2, weight_type )
        return prot


    def open_file(self, output_file):
        self.fp_c = open(output_file, 'w')
        header_name = output_file[0:-2] + ".h"
        self.fp_h = open(header_name, 'w')
        self.header_name = os.path.basename(header_name)

    def write_include(self):
        self.wr('#include <string.h>\n')
        self.wr('#include <limits.h>\n')
        self.wr('#include <assert.h>\n')
        self.wr('#include "cqt.h"\n')
        self.wr('#include "cqt_net.h"\n')
        self.wr('#include "%s"\n' % self.header_name)
        self.wr('\n')

    def wr(self, s):
        self.fp_c.write(s)

    def add_funciton_to_header(self, prototype):
        self.fp_h.write("#pragma SDS data zero_copy(ip)\n")
        self.fp_h.write("#pragma SDS data zero_copy(op)\n")
        self.fp_h.write("#pragma SDS data access_pattern(ip:SEQUENTIAL)\n")
        self.fp_h.write("#pragma SDS data mem_attribute(ip:PHYSICAL_CONTIGUOUS)\n")
        self.fp_h.write("#pragma SDS data mem_attribute(op:PHYSICAL_CONTIGUOUS)\n")
        self.fp_h.write("%s;\n" % prototype)
        self.fp_h.write("\n")

